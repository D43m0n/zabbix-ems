# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

# Install the "vagrant-hostmanager" plugin from a terminal:
# vagrant plugin install vagrant-hostmanager

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "centos/7"

  # give the box a little more time to boot before vagrant tries to communicate
  config.vm.boot_timeout = 600

  # vagrant plugin: vagrant-timezone
  if Vagrant.has_plugin?("vagrant-timezone")
    config.timezone.value = "Europe/Amsterdam"
  end

  # vagrant plugin: vagrant-puppet-install
  config.puppet_install.puppet_version = :latest

  # vagrant plugin: vagrant-hostmanager
  config.vm.network "private_network", type: "dhcp"

  config.hostmanager.enabled = true
  config.hostmanager.ip_resolver = proc do |vm, resolving_vm|
    if vm.id
      `VBoxManage guestproperty get #{vm.id} "/VirtualBox/GuestInfo/Net/1/V4/IP"`.split()[1]
    end
  end

  config.vm.define :server do |srv|
    srv.vm.provider "virtualbox" do |vb|
      vb.memory = 2048
    end
    srv.vm.hostname = "zabbix-server.localdomain"
    srv.vm.synced_folder "synced_folder/server/", "/vagrant", create: true
    srv.vm.synced_folder "../templates/", "/zabbix-ems/templates", create: true
    srv.vm.network "forwarded_port", guest: 80, host: 8080
    srv.vm.network "forwarded_port", guest: 8080, host: 1080
    srv.vm.network "forwarded_port", guest: 8081, host: 1081
    srv.hostmanager.aliases = %w(zabbix-server.localdomain zabbix-server.zems)
    srv.vm.provision "shell", path: "pre-provision.sh"
    srv.vm.provision "puppet" do |srvpuppet|
      srvpuppet.options = ['--verbose --fileserverconfig=/vagrant/fileserver.conf']
      srvpuppet.environment_path = "puppet/environments"
    end
  end

 config.vm.define :client do |cl|
    cl.vm.provider "virtualbox" do |vb|
      vb.memory = 1024
    end
    cl.vm.hostname = "zabbix-client.localdomain"
    cl.vm.synced_folder "synced_folder/client/", "/vagrant", create: true
    cl.hostmanager.aliases = %w(zabbix-client.localdomain zabbix-client.zems)
    cl.vm.provision "shell", path: "pre-provision.sh"
    cl.vm.provision "puppet" do |clpuppet|
      clpuppet.options = ['--verbose --fileserverconfig=/vagrant/fileserver.conf']
      clpuppet.environment_path = "puppet/environments"
    end
 end

# The code below was found on:
# https://github.com/dotless-de/vagrant-vbguest/issues/141#issuecomment-101071914
#
# This fixes the issue with CentOS kernel-devel and kernel version differences
# as described on:
# https://github.com/dotless-de/vagrant-vbguest/issues/161

module UpdateCentOSKernel
    class UpdateCentOSKernelPlugin < Vagrant.plugin('2')
        name 'update_centos_kernel_plugin'

        # update yum after first boot when provisioning
        action_hook(:update_yum, :machine_action_up) do |hook|
            hook.after(VagrantPlugins::ProviderVirtualBox::Action::CheckGuestAdditions, UpdateCentOSKernel::Middleware::KernelUpdater)
        end
    end

    module Middleware
        class KernelUpdater
            @@rebooted = {};

            def initialize(app, env)
                @app = app
            end

            def call(env)
                @env = env
                @vm = env[:machine]
                @ui = env[:ui]
                self.update_kernel()
            end

            def update_kernel()
                if !@@rebooted[@vm.id]
                    @@rebooted[@vm.id] = true

                    @ui.info 'Updating kernel'
                    @vm.communicate.sudo('yum install -y kernel kernel-devel') do |type, data|
                        if type == :stderr
                            @ui.error(data);
                        else
                            @ui.info(data);
                        end
                    end

                    self.reboot()
                end
            end

            def reboot()
                @ui.info('Rebooting after updating kernel')
                simle_reboot = Vagrant::Action::Builder.new.tap do |b|
                    b.use Vagrant::Action::Builtin::Call, Vagrant::Action::Builtin::GracefulHalt, :poweroff, :running do |env2, b2|
                        if !env2[:result]
                            b2.use VagrantPlugins::ProviderVirtualBox::Action::ForcedHalt
                        end
                    end

                    b.use VagrantPlugins::ProviderVirtualBox::Action::Boot
                    if defined?(Vagrant::Action::Builtin::WaitForCommunicator)
                        b.use Vagrant::Action::Builtin::WaitForCommunicator, [:starting, :running]
                    end
                    b.use VagrantVbguest::Middleware
                end
                @env[:action_runner].run(simle_reboot, @env)
            end
        end
    end
end



  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.:
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
end
